cmake_minimum_required(VERSION 3.19)
project(open-mp LANGUAGES C CXX VERSION 0.0.1)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

if (NOT ${CMAKE_CXX_COMPILER_ID} STREQUAL Clang)
	message(
		FATAL_ERROR
		"Clang is the only compiler officially supported for building."
		"Use clang on Unix or clang-cl on Windows to build."
	)
endif()

set(CMAKE_CXX_STANDARD 17)

# MSVC
if(MSVC)
	set(CMAKE_CXX_STANDARD_REQUIRED ON)
	add_compile_options("/clang:-v")
	add_link_options("/LARGEADDRESSAWARE")
	# Use strict intermediate floating-point precision
	add_compile_options("/fp:strict")
	add_compile_options("/arch:SSE2")
	add_compile_options("-Werror=format")

elseif(UNIX)
	# Linux GCC/Clang
	if(NOT APPLE)
		set(CMAKE_CXX_STDLIB "libstdc++" CACHE STRING "The standard library to use.")
		set(CROSS_BUILD FALSE CACHE BOOL "Whether to cross-build.")
		set(CROSS_BUILD_ARCH "armv6" CACHE STRING "The architecture to cross-build for.")
	# Apple Clang
	else()
		set(CMAKE_CXX_STDLIB "libc++" CACHE STRING "The standard library to use.")

		set(CROSS_BUILD FALSE)
		set(CROSS_BUILD_ARCH)

		set(CMAKE_THREAD_LIBS_INIT "-lpthread")
		set(CMAKE_HAVE_THREADS_LIBRARY 1)
		set(CMAKE_USE_WIN32_THREADS_INIT 0)
		set(CMAKE_USE_PTHREADS_INIT 1)
		set(THREADS_PREFER_PTHREAD_FLAG ON)
	endif()

	set(CMAKE_C_FLAGS "-pthread -Werror=format -fno-builtin-getentropy")
	set(CMAKE_CXX_FLAGS "-fno-sized-deallocation -std=gnu++17 -Wno-register -pthread -static-libstdc++ -Werror=format -fno-builtin-getentropy")

	# If not cross-building, assume we're using a x86_64 compiler
	if(CROSS_BUILD)
		set(CMAKE_CXX_FLAGS "-march=${CROSS_BUILD_ARCH} ${CMAKE_CXX_FLAGS}")
		message("Generating cross-build project for ${CROSS_BUILD_ARCH}.")
	else()
		set(CMAKE_C_FLAGS "-m32 ${CMAKE_C_FLAGS}")
		set(CMAKE_CXX_FLAGS "-m32 ${CMAKE_CXX_FLAGS}")
		set(CMAKE_SIZEOF_VOID_P 4)
		message("Generating x86 project")
	endif()
	# Clang or Apple Clang
	if(CMAKE_CXX_COMPILER_ID MATCHES Clang)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=${CMAKE_CXX_STDLIB} -fvisibility=hidden -Wno-switch -Wno-unused-command-line-argument")
	endif()

	# Use strict intermediate floating-point precision
	add_compile_options(-msse2 -mfpmath=sse)

endif()

# Flags to know when we are compiling in Debug mode.
set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -D_DEBUG -D_DO_PRINTF")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D_DEBUG -D_DO_PRINTF")

if(WIN32)
	# https://stackoverflow.com/questions/42946335/deprecated-header-codecvt-replacement
	# `codecvt` is deprecated, but is defined as remaining until a more secure replacement is
	# standardised, thus just defining `_SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING` is fine.
	add_definitions(
		-D_CRT_SECURE_NO_WARNINGS
		-D_WINSOCK_DEPRECATED_NO_WARNINGS
		-D_SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING
		-DWIN32_LEAN_AND_MEAN
		-D_CRT_DECLARE_NONSTDC_NAMES
		-D_CRT_NONSTDC_NO_WARNINGS
	)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL GNU)
	add_definitions(-D_GLIBCXX_USE_CXX11_ABI=0)
endif()

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

function(GroupSourcesByFolder target)
	set(SOURCE_GROUP_DELIMITER "/")
	set(last_dir "")
	set(files "")

	get_target_property(sources ${target} SOURCES)

	foreach(file ${sources})
		file(RELATIVE_PATH relative_file "${CMAKE_CURRENT_SOURCE_DIR}" ${file})
		get_filename_component(dir "${relative_file}" PATH)
		if(NOT "${dir}" STREQUAL "${last_dir}")
			if(files)
				source_group("${last_dir}" FILES ${files})
			endif()
			set(files "")
		endif()
		set(files ${files} ${file})
		set(last_dir "${dir}")
	endforeach()

	if(files)
		source_group("${last_dir}" FILES ${files})
	endif()
endfunction()

set(BUILD_PAWN_COMPONENT TRUE CACHE BOOL "Whether to build the PAWN component")
set(BUILD_UNICODE_COMPONENT TRUE CACHE BOOL "Whether to build the Unicode component")
set(BUILD_LEGACY_COMPONENTS TRUE CACHE BOOL "Whether to build the legacy components")
set(BUILD_TEST_COMPONENTS FALSE CACHE BOOL "Whether to build the test component")
set(BUILD_SQLITE_COMPONENT TRUE CACHE BOOL "Whether to build the SQLite component")

add_subdirectory(lib)
add_subdirectory(SDK)
add_subdirectory(Shared)
add_subdirectory(Server)
