name: Build

on:
  workflow_dispatch:
  push:
    branches:
      - 'master'
      - 'dev'
    paths:
      - '**.hpp'
      - '**.cpp'
      - '**.h'
      - '**.c'
      - '**CMakeLists.txt'
      - '.github/workflows/build.yml'
  pull_request:
    branches:
      - '*'
      - '*/*'
      - '**'
    paths:
      - '**.hpp'
      - '**.cpp'
      - '**.h'
      - '**.c'
      - '**CMakeLists.txt'
      - '.github/workflows/build.yml'

jobs:
  build-windows:
    runs-on: [self-hosted, Windows]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        token: ${{ secrets.CI_TOKEN }}

    - name: Setup Python
      uses: actions/setup-python@v2

    - name: Install CMake
      uses: lukka/get-cmake@v3.19.0

    - name: Install latest conan
      run: |
        python -m pip install --upgrade pip
        pip install conan
    - name: Generate build files
      run: mkdir build && cd build && cmake .. -G "Visual Studio 16 2019" -A Win32 -T "ClangCL"

    - name: Build
      run: |
        cd build
        cmake --build . --config Debug
  build-linux:
    runs-on: [self-hosted, Linux]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        token: ${{ secrets.CI_TOKEN }}

    - name: Setup Python
      uses: actions/setup-python@v2

    - name: Install CMake
      uses: lukka/get-cmake@v3.19.0

    - name: Install gcc/g++-multilib for linux & set clang
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update -y
        sudo apt install -y gcc-multilib g++-multilib clang
        echo "CC=/usr/bin/clang" >> $GITHUB_ENV
        echo "CXX=/usr/bin/clang++" >> $GITHUB_ENV

    - name: Install latest conan
      run: |
        python -m pip install --upgrade pip
        pip install conan
    - name: Generate build files
      run: mkdir build && cd build && cmake .. -G Ninja -DCMAKE_CXX_FLAGS=-m32 -DCMAKE_C_FLAGS=-m32 -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: |
        cd build
        cmake --build . --config Debug

    - name: Create a snapshot
      env:
        CI_PRIVATE_KEY: ${{ secrets.CI_PRIVATE_KEY }}
      run: |
        version=$(git describe --always --tags)
        folder_name="open.mp-${version}"
        archive_name="open.mp-linux-snapshot-${version}.tar.xz"
        cd build/Output/*
        mv Server "${folder_name}"
        tar -cJvf "${archive_name}" "${folder_name}"
        eval $(ssh-agent -s)
        echo "${CI_PRIVATE_KEY}" | ssh-add -
        echo "put ${archive_name}" | sftp -oStrictHostKeyChecking=accept-new omp-ci@tms-server.com:snapshots/
